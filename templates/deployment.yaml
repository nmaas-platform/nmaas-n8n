apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "n8n.fullname" . }}
  labels:
    {{- include "n8n.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: {{ .Values.deploymentStrategy.type }}
  selector:
    matchLabels:
      {{- include "n8n.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/type: master
  template:
    metadata:
      annotations:
        checksum/config: {{ print .Values | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "n8n.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/type: master
        {{- if .Values.podLabels }}
          {{ toYaml .Values.podLabels | nindent 8 }}
        {{- end }}

    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "n8n.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if or .Values.extensions.d2 .Values.extensions.nrx }}
      initContainers:
        {{- if .Values.extensions.d2 }}
        - command:
          - /bin/sh
          - -c
          - |
            if [ ! -f /opt/software/d2 ]; then
              echo "Installing d2..."
              wget -O /tmp/d2.tar.gz https://github.com/terrastruct/d2/releases/download/v0.5.1/d2-v0.5.1-linux-amd64.tar.gz
              tar -xvzf /tmp/d2.tar.gz -C /tmp
              mv /tmp/d2-*/bin/d2 /opt/software/d2
              chmod +x /opt/software/d2
            else
              echo "d2 already installed..."
            fi
          image: alpine:3.17.4
          imagePullPolicy: IfNotPresent
          name: init-install-d2
          volumeMounts:
          - mountPath: /opt/software
            name: data
            subPath: software
        {{- end }}
        {{- if .Values.extensions.nrx }}
        - command:
          - /bin/sh
          - -c
          - |
            if [ ! -d /opt/software/nrx ]; then
              echo "Installing nrx..."
              apk add --no-cache py3-pip py3-virtualenv git
              git clone https://github.com/korvoj/nrx /opt/software/nrx
              cd /opt/software/nrx
              git pull && git submodule init && git submodule update && git submodule status
              virtualenv -p python3 venv
              /opt/software/nrx/venv/bin/pip3 install -r /opt/software/nrx/requirements.txt
            else
              echo "nrx already installed..."
            fi
          image: alpine:3.17.4
          imagePullPolicy: IfNotPresent
          name: init-install-nrx
          volumeMounts:
          - mountPath: /opt/software
            name: data
            subPath: software
        {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.command }}
          command:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            {{- include "n8n.deploymentPodEnvironments" . | nindent 12 }}
            {{- if .Values.ingress.enabled }}
            - name: WEBHOOK_URL
              value: {{ printf "https://%s/" (index .Values "ingress" "hosts" | first).host  | quote }}
            {{- end }}
          lifecycle:
            {{- toYaml .Values.lifecycle | nindent 12 }}
          ports:
            - name: http
              containerPort: {{ get .Values.config "port" | default 5678 }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /root/.n8n
            {{- if or .Values.extensions.d2 .Values.extensions.nrx }}
            - name: data
              mountPath: /opt/software
              subPath: software
            {{- end }}
            {{- if .Values.config }}
            - name: config-volume
              mountPath: /n8n-config
            {{- end }}
            {{- if .Values.secret }}
            - name: secret-volume
              mountPath: /n8n-secret
                {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: "data"
          {{ include "n8n.pvc" . }}
        {{- if .Values.config }}
        - name: config-volume
          configMap:
            name: {{ include "n8n.fullname" . }}
        {{- end }}
        {{- if or (.Values.secret) (.Values.existingSecret) }}
        - name: secret-volume
          secret:
            secretName: {{ if .Values.existingSecret }}{{ .Values.existingSecret }}{{ else }}{{ include "n8n.fullname" . }}{{ end }}
            items:
              - key: "secret.json"
                path: "secret.json"
        {{- end }}
